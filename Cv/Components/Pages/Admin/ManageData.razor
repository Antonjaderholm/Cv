@page "/Admin/ManageData"
@using Cv.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject Labb3CVClient Client

<div class="container mt-4">
    <h3>Manage CV Data</h3>
    <div class="row">
        <!-- Skills Section -->
        <div class="col-md-6">
            <h4>Skills</h4>
            <div class="mb-3">
                <input @bind="newSkillName" @bind:event="oninput" class="form-control mb-2" placeholder="Skill name" />
                <input @bind="newSkillLevel" @bind:event="oninput" class="form-control mb-2" type="number" min="1" max="5" placeholder="Skill level (1-5)" />
                <button @onclick="AddSkillAsync" class="btn btn-primary" disabled="@string.IsNullOrWhiteSpace(newSkillName)">Add Skill</button>
            </div>
            @if (skills?.Any() == true)
            {
                foreach (var skill in skills)
                {
                    <div class="card mb-2">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <span>@skill.Name (Level: @skill.SkillLevel)</span>
                            <button @onclick="async () => await DeleteSkillAsync(skill.Id)" class="btn btn-danger btn-sm">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Projects Section -->
        <div class="col-md-6">
            <h4>Projects</h4>
            <div class="mb-3">
                <input @bind="newProjectTitle" @bind:event="oninput" class="form-control mb-2" placeholder="Project title" />
                <input @bind="newProjectDescription" @bind:event="oninput" class="form-control mb-2" placeholder="Project description" />
                <input @bind="newProjectGitHubUrl" @bind:event="oninput" class="form-control mb-2" placeholder="GitHub URL" />
                <button @onclick="AddProjectAsync" class="btn btn-primary" disabled="@string.IsNullOrWhiteSpace(newProjectTitle)">Add Project</button>
            </div>
            @if (projects?.Any() == true)
            {
                foreach (var project in projects)
                {
                    <div class="card mb-2">
                        <div class="card-body">
                            <h5>@project.Title</h5>
                            <p>@project.Description</p>
                            <a href="@project.GitHubUrl" target="_blank">View on GitHub</a>
                            <button @onclick="async () => await DeleteProjectAsync(project.Id)" class="btn btn-danger btn-sm float-end">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Skill> skills = new();
    private List<Project> projects = new();
    private string newSkillName = "";
    private int newSkillLevel;
    private string newProjectTitle = "";
    private string newProjectDescription = "";
    private string newProjectGitHubUrl = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing ManageData component");
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            Console.WriteLine("Loading data...");
            skills = await Client.GetSkillsAsync();
            projects = await Client.GetProjectsAsync();
            Console.WriteLine($"Loaded {skills.Count} skills and {projects.Count} projects");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task AddSkillAsync()
    {
        try
        {
            Console.WriteLine($"Adding skill: {newSkillName}");
            if (!string.IsNullOrWhiteSpace(newSkillName))
            {
                var skill = new Skill
                    {
                        Name = newSkillName,
                        SkillLevel = newSkillLevel,
                        YearsExperience = 0
                    };
                var result = await Client.AddSkillAsync(skill);
                Console.WriteLine($"Skill added successfully with ID: {result.Id}");
                await LoadDataAsync();
                newSkillName = "";
                newSkillLevel = 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding skill: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task DeleteSkillAsync(string id)
    {
        try
        {
            Console.WriteLine($"Deleting skill with ID: {id}");
            await Client.DeleteSkillAsync(id);
            Console.WriteLine("Skill deleted successfully");
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting skill: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task AddProjectAsync()
    {
        try
        {
            Console.WriteLine($"Adding project: {newProjectTitle}");
            if (!string.IsNullOrWhiteSpace(newProjectTitle))
            {
                var project = new Project
                    {
                        Title = newProjectTitle,
                        Description = newProjectDescription,
                        GitHubUrl = newProjectGitHubUrl
                    };
                var result = await Client.AddProjectAsync(project);
                Console.WriteLine($"Project added successfully with ID: {result.Id}");
                await LoadDataAsync();
                newProjectTitle = "";
                newProjectDescription = "";
                newProjectGitHubUrl = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding project: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task DeleteProjectAsync(string id)
    {
        try
        {
            Console.WriteLine($"Deleting project with ID: {id}");
            await Client.DeleteProjectAsync(id);
            Console.WriteLine("Project deleted successfully");
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting project: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }
}