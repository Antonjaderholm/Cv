@using Cv.Models
@page "/Admin/ManageData"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject Labb3CVClient Client

<h3>Manage CV Data</h3>

<div class="container mt-4">
    <h3>Manage CV Data</h3>

    <!-- Skills Section -->
    <div class="row">
        <div class="col-md-6">
            <h4>Skills</h4>
            <div class="mb-3">
                <input @bind="newSkillName" class="form-control mb-2" placeholder="Skill name" />
                <input @bind="newSkillLevel" class="form-control mb-2" type="number" min="1" max="5" placeholder="Skill level (1-5)" />
                <button @onclick="AddSkill" class="btn btn-primary">Add Skill</button>
            </div>
            @if (skills != null)
            {
                foreach (var skill in skills)
                {
                    <div class="card mb-2">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <span>@skill.Name (Level: @skill.SkillLevel)</span>
                            <button @onclick="() => DeleteSkill(skill.Id)" class="btn btn-danger btn-sm">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Projects Section -->
        <div class="col-md-6">
            <h4>Projects</h4>
            <div class="mb-3">
                <input @bind="newProjectTitle" class="form-control mb-2" placeholder="Project title" />
                <input @bind="newProjectDescription" class="form-control mb-2" placeholder="Project description" />
                <input @bind="newProjectGitHubUrl" class="form-control mb-2" placeholder="GitHub URL" />
                <button @onclick="AddProject" class="btn btn-primary">Add Project</button>
            </div>
            @if (projects != null)
            {
                foreach (var project in projects)
                {
                    <div class="card mb-2">
                        <div class="card-body">
                            <h5>@project.Title</h5>
                            <p>@project.Description</p>
                            <a href="@project.GitHubUrl" target="_blank">View on GitHub</a>
                            <button @onclick="() => DeleteProject(project.Id)" class="btn btn-danger btn-sm float-end">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Skill> skills;
    private List<Project> projects;
    private string newSkillName;
    private int newSkillLevel;
    private string newProjectTitle;
    private string newProjectDescription;
    private string newProjectGitHubUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            Console.WriteLine("Starting LoadData");
            skills = await Client.GetSkillsAsync();
            projects = await Client.GetProjectsAsync();
            Console.WriteLine($"Loaded {skills?.Count ?? 0} skills and {projects?.Count ?? 0} projects");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadData: {ex.Message}");
            throw;
        }
    }

    private async Task AddSkill()
    {
        Console.WriteLine($"Starting to add skill - Name: {newSkillName}, Level: {newSkillLevel}");
        var skill = new Skill
            {
                Name = newSkillName,
                SkillLevel = newSkillLevel,
                YearsExperience = 0
            };

        try
        {
            var result = await Client.AddSkillAsync(skill);
            Console.WriteLine($"Skill added successfully with ID: {result.Id}");
            await LoadData();

            // Clear form
            newSkillName = string.Empty;
            newSkillLevel = 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding skill: {ex.Message}");
        }
    }

    private async Task DeleteSkill(string id)
    {
        try
        {
            Console.WriteLine($"Deleting skill with id: {id}");
            await Client.DeleteSkillAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteSkill: {ex.Message}");
            throw;
        }
    }

    private async Task AddProject()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(newProjectTitle))
            {
                Console.WriteLine($"Starting AddProject with title: {newProjectTitle}");

                var project = new Project
                    {
                        Title = newProjectTitle,
                        Description = newProjectDescription,
                        GitHubUrl = newProjectGitHubUrl
                    };

                var response = await Client.AddProjectAsync(project);
                Console.WriteLine($"API Response received: {response?.Title ?? "null"}");

                await LoadData();
                newProjectTitle = string.Empty;
                newProjectDescription = string.Empty;
                newProjectGitHubUrl = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in AddProject: {ex.Message}");
            throw;
        }
    }

    private async Task DeleteProject(string id)
    {
        try
        {
            Console.WriteLine($"Deleting project with id: {id}");
            await Client.DeleteProjectAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteProject: {ex.Message}");
            throw;
        }
    }
}