@page "/Admin/ManageData"
@using Cv.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject Labb3CVClient Client

<h3>Manage CV Data</h3>

<div class="container mt-4">
    <h3>Manage CV Data</h3>

    <!-- Skills Section -->ccccccc
    <div class="row">
        <div class="col-md-6">
            <h4>Skills</h4>
            <div class="mb-3">
                <input @bind="newSkillName" class="form-control mb-2" placeholder="Skill name" />
                <input @bind="newSkillLevel" class="form-control mb-2" type="number" min="1" max="5" placeholder="Skill level (1-5)" />
                <button @onclick="AddSkill" class="btn btn-primary">Add Skill</button>
            </div>
            @if (skills != null)
            {
                foreach (var skill in skills)
                {
                    <div class="card mb-2">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <span>@skill.Name (Level: @skill.SkillLevel)</span>
                            <button @onclick="() => DeleteSkill(skill.Id)" class="btn btn-danger btn-sm">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Projects Section --> 
        <div class="col-md-6">
            <h4>Projects</h4>
            <div class="mb-3">
                <input @bind="newProjectTitle" class="form-control mb-2" placeholder="Project title" />
                <input @bind="newProjectDescription" class="form-control mb-2" placeholder="Project description" />
                <input @bind="newProjectGitHubUrl" class="form-control mb-2" placeholder="GitHub URL" />
                <button @onclick="AddProject" class="btn btn-primary">Add Project</button>
            </div>
            @if (projects != null)
            {
                foreach (var project in projects)
                {
                    <div class="card mb-2">
                        <div class="card-body">
                            <h5>@project.Title</h5>
                            <p>@project.Description</p>
                            <a href="@project.GitHubUrl" target="_blank">View on GitHub</a>
                            <button @onclick="() => DeleteProject(project.Id)" class="btn btn-danger btn-sm float-end">Delete</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Skill> skills = new();
    private List<Project> projects = new();
    private string newSkillName = "";
    private int newSkillLevel;
    private string newProjectTitle = "";
    private string newProjectDescription = "";
    private string newProjectGitHubUrl = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        skills = await Client.GetSkillsAsync();
        projects = await Client.GetProjectsAsync();
        StateHasChanged();
    }

    private async Task AddSkill()
    {
        if (!string.IsNullOrWhiteSpace(newSkillName))
        {
            var skill = new Skill
                {
                    Name = newSkillName,
                    SkillLevel = newSkillLevel,
                    YearsExperience = 0
                };
            await Client.AddSkillAsync(skill);
            await LoadData();
            newSkillName = "";
            newSkillLevel = 0;
        }
    }

    private async Task DeleteSkill(string id)
    {
        await Client.DeleteSkillAsync(id);
        await LoadData();
    }

    private async Task AddProject()
    {
        if (!string.IsNullOrWhiteSpace(newProjectTitle))
        {
            var project = new Project
                {
                    Title = newProjectTitle,
                    Description = newProjectDescription,
                    GitHubUrl = newProjectGitHubUrl
                };
            await Client.AddProjectAsync(project);
            await LoadData();
            newProjectTitle = "";
            newProjectDescription = "";
            newProjectGitHubUrl = "";
        }
    }

    private async Task DeleteProject(string id)
    {
        await Client.DeleteProjectAsync(id);
        await LoadData();
    }
}